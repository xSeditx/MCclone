Block::Block(Vec3 pos, MetaData &blockdata)
     : Position(pos) ,  
       VertexCount(0),
       ID(BlockCount++)
{
//f_TRACE(Print("Block Constructor"));

    GLfloat size = (blockdata.Size);

    Vec3 V[] = 
    {                                                   
            Vec3(-size,-size, size), // FRONT    // 0                                             
            Vec3( size,-size, size),             // 1                                    
            Vec3( size, size, size),             // 2                                    
            Vec3(-size, size, size),             // 3                                    
                                                                                     
            Vec3( size, size, size), // RIGHT    // 4    2                                        
            Vec3( size, size,-size),             // 5                                    
            Vec3( size,-size,-size),             // 6                                    
            Vec3( size,-size, size),             // 7    1                                
                                                        
            Vec3(-size,-size,-size), // BACK     // 8                                            
            Vec3( size,-size,-size),             // 9    6                               
            Vec3( size, size,-size),             // 10   5                                
            Vec3(-size, size,-size),             // 11
                                                    
            Vec3(-size,-size,-size), // LEFT     // 12   8                                        
            Vec3(-size,-size, size),             // 13   7                              
            Vec3(-size, size, size),             // 14   3                                
            Vec3(-size, size,-size),             // 15  11                                
                                                       
            Vec3( size, size, size), // TOP      // 16   2                                      
            Vec3(-size, size, size),             // 17   3                                
            Vec3(-size, size,-size),             // 18   11                                
            Vec3( size, size,-size),             // 19   5                                
                                                        
            Vec3(-size,-size,-size), // BOTTOM   // 20   8                                   
            Vec3( size,-size,-size),             // 21   9                          
            Vec3( size,-size, size),             // 22   1                          
            Vec3(-size,-size, size),             // 23   0                               
    };

    Vec2 UVs[] = 
    {                                                   
            Vec2(0.00f, 0.66f),  // FRONT  // 0                                             
            Vec2(0.00f, 0.33f),            // 1                                             
            Vec2(0.25f, 0.33f),            // 2                                             
            Vec2(0.25f, 0.66f),            // 3                                             
                                                          
            Vec2(0.25f, 0.33f),  // RIGHT  // 4                                             
            Vec2(0.50f, 0.33f),            // 5                                             
            Vec2(0.50f, 0.00f),            // 6                                             
            Vec2(0.25f, 0.00f),            // 7                                             
                                           
            Vec2(0.75f, 0.66f),  // BACK   // 8                                             
            Vec2(0.75f, 0.33f),            // 9                                             
            Vec2(0.50f, 0.33f),            // 10                                             
            Vec2(0.50f, 0.66f),            // 11
                                            
            Vec2(0.50f, 1.00f),  // LEFT   // 12                                             
            Vec2(0.25f, 1.00f),            // 13                                             
            Vec2(0.25f, 0.66f),            // 14                                             
            Vec2(0.50f, 0.66f),            // 15                                             
 
            Vec2(0.25f, 0.33f),  // TOP    // 16                                             
            Vec2(0.25f, 0.66f),            // 17                                             
            Vec2(0.50f, 0.66f),            // 18                                             
            Vec2(0.50f, 0.33f),            // 19     

            Vec2(0.75f, 0.66f),  // BOTTOM // 20                                             
            Vec2(0.75f, 0.33f),            // 21                                             
            Vec2(1.00f, 0.33f),            // 22                                             
            Vec2(1.00f, 0.66f),            // 23                 
    };

    GLuint Indexdata[]=
    { 
        0,1,2,    0,2,3,     // FRONT
        6,5,4,    4,7,6,     // RIGHT 
        10,9,8,   8,11,10,   // BACK
        12,13,14, 12,14,15,  // LEFT
        18,17,16, 16,19,18,  // TOP
        20,21,22, 20,22,23   // BOTTOM
    };
    
// Color stuff should start here, been removed temporarily 

    Vec3 NormalData[24];

    for_loop(Index, 24)
    {
        float x = V[Index].x;
        float y = V[Index].y;
        float z = V[Index].z;

        float  magnitude = sqrt(Squared(x) + Squared(y) + Squared(z));

        if (magnitude != 0)
        {
            x /= magnitude;
            y /= magnitude;
            z /= magnitude;
        }
        NormalData[Index] =   Vec3(x,y,z); //  Vec3(RANDOM(2)-1,RANDOM(2)-1,RANDOM(2)-1);//
    }

    for_loop(Index, 24)
    {
        VertexList.push_back(V[Index]);
        TextureCoords.push_back(UVs[Index]);
        NormalList.push_back(NormalData[Index]);
    }

    for_loop(Index, 36)
    {
        IndexList.push_back(Indexdata[Index]);
    }

// Averages all the normals so Each Faces Vertices have normals facing straight out to prevent interpolation of the light
// Across the block

    for(int Index = 0; Index < 24 ; Index += 4)
    {
        Vec3 Norm =  NormalData[Index]   +
                     NormalData[Index+1] +
                     NormalData[Index+2] +
                     NormalData[Index+3];
   
        Norm /= 4; 
   
        NormalData[Index]   = Norm;
        NormalData[Index+1] = Norm;
        NormalData[Index+2] = Norm;
        NormalData[Index+3] = Norm;
   
    }
   

    
   Vertices = new VertexBuffer(&VertexList[0], 24);
   Indices  = new IndexBuffer (&IndexList[0] , 36);

   if(blockdata.Type == Dirt)   Textures = new TextureBuffer(BlockTexture , &TextureCoords[0], 24);
   if(blockdata.Type == Stone)  Textures = new TextureBuffer(StoneTexture , &TextureCoords[0], 24);
   Normals  = new NormalBuffer (Norms, 24);

   VAO = new VAOBuffer();

   VAO->Attach(Vertices);
   VAO->Attach(Indices);
   VAO->Attach(Normals);
   VAO->Attach(Textures);


   std::memcpy(&UV     ,          &UVs,  sizeof(UVs));
   std::memcpy(&Indice ,     Indexdata,  sizeof(Indexdata));
   std::memcpy(&Norms  ,   &NormalData,  sizeof(NormalData));
   std::memcpy(&Verts  ,            &V,  sizeof(V));

}