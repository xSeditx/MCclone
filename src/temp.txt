class Cam
{
public:
    Cam(){}
    Cam(Vec3 position, Vec3 Rotation)
    { 
        FOV = 45.0;
        AspectRatio = 640.0f / 480.0f;
        Near = .1f;
        Far  = 1000.0f;

        Forward =  Vec3(0.0f, 0.0f, 1.0f);
        Up      =  Vec3(0.0f, 1.0f, 0.0f);

        Perspective = glm::perspective(FOV,  AspectRatio, Near, Far);
        View = GetViewProjection();
    }

    float  FOV, 
           AspectRatio, 
           Near,
           Far;

    Vec3 Position;
    Vec3 Forward;
    Vec3 Up;

    Matrix Perspective;
    Matrix View;

    void Update()
    {
        View = GetViewProjection();
    }
    Matrix GetViewProjection()
    {
        View = glm::lookAt(Position, Position + Forward, Up);
        return View;
    }
    


    void Move(float speed)
    {
        Forward  = Vec3( 0.0f, 0.0f, -1.0f);
     //   Forward  = glm::normalize(Forward); // Not Sure if This Is Currently Needed
        Position += speed * Forward;
        View = glm::translate(glm::mat4(1.0f),Position);
    }
    void Strife(float speed)
    {
        Position += glm::normalize(glm::cross(Forward,Up)) * speed;
    }
};



// OLDER STUFF.... More Half Assed. Its halfway in between transition between using Linear and Matrix //Math. I have since started to try to use the above as I want the Camera to be part of the Window //itself instead of its own thing.







//                                                                                                                          
//                          OPENGL 2.0 Abstraction API
//                               January 24 2018
//                              -----------------                                                                           
//                                                                                                                          
//                             CANERA HANDLING LIB                                                                     
//==========================================================================================================================
 //'world space' and 'camera/view space'.




#include "Camera.h"
#include "Window.h"
//#include <GLFW/glfw3.h> 
#include "gtc/matrix_transform.hpp"

//(30, 640.0 / 480.0, 1, 1000);

Camera::Camera()
      :
      Position(0,0,0),
      Rotation(0,0,0),
      Speed(1)
{

    AspectRatio = 640.0f / 480.0f;
    Near =  .1f;
    Far  =  1000.0f;
    FOV  =  90.0f;
    ProjectionMatrix = glm::perspective(FOV,  AspectRatio, Near, Far);
    

    float V[] = 
    {
        0.0f,  0.0f,  0.0f,  0.0f,
        0.0f,  0.0f,  0.0f,  0.0f,
        0.0f,  0.0f,  0.0f,  0.0f,
        0.0f,  0.0f,  0.0f,  1.0f
    };
    
    ViewMatrix = glm::make_mat4(V);

    Forward =  Vec3(0.0f, 0.0f,-1.0f);
    Up      =  Vec3(0.0f, 1.0f, 0.0f);
    Right   = glm::normalize(glm::cross(Up, cameraDirection)); // Vec3(1.0f, 0.0f, 0.0f);


//    
//glm::vec3 cameraDirection = glm::normalize(Position - cameraTarget);
//CameraUp =  glm::cross(cameraDirection, CameraRight);
//ViewMatrix = glm::lookAt(glm::vec3(Rotation.x, 0.0, Rotation.z), glm::vec3(0.0, 0.0, 0.0), glm::vec3(0.0, 1.0, 0.0)); 
//           // glm::vec4 Position = glm::vec4(glm::vec3(0.0), 1.0);
//           // Transform = glm::mat4(1.0);
           // Transform[4] = glm::vec4(1.0, 1.0, 0.0, 1.0);
           // glm::vec4 Transformed = Model * Position;
}

void Camera::MoveForward(const float &speed)
{
    Speed = speed;
    float  SIN_X = sin(RADIANS(Rotation.x - 90));
    Position.x -= (cos(RADIANS(Rotation.y - 90)) * SIN_X) * Speed;
    Position.y -=  cos(RADIANS(Rotation.x - 90)) * speed;
    Position.z -= (sin(RADIANS(Rotation.y - 90)) * SIN_X) * Speed;
}
void Camera::MoveBack(const float &speed)
{
    Speed = speed;
    float  SIN_X = sin(RADIANS(Rotation.x - 90));
    Position.x += (cos(RADIANS(Rotation.y - 90))* SIN_X) * Speed;
    Position.y +=  cos(RADIANS(Rotation.x - 90))* speed;
    Position.z += (sin(RADIANS(Rotation.y - 90))* SIN_X) * Speed;
}

void Camera::MoveLeft(const float &speed)
{
    Speed = speed;
    Position.x +=  cos(RADIANS(Rotation.y - 0)) * Speed;
    Position.z +=  sin(RADIANS(Rotation.y - 0)) * Speed;
}

void Camera::MoveRight(const float &speed)
{
    Speed = speed;
    Position.x += cos(RADIANS(Rotation.y - 180)) * Speed;
    Position.z += sin(RADIANS(Rotation.y - 180)) * Speed;
}
void Camera::Rotate(float x,float y)
{
    Rotation.y += (x * .8);  
    Rotation.x += (y * .8);
}
void Camera::Update()
{
if(Rotation.x >= 360) Rotation.x = 0;
if(Rotation.x < 0)    Rotation.x = 360;
if(Rotation.y >= 360) Rotation.y = 0;
if(Rotation.y < 0)    Rotation.y = 360;


        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity();
  // ROTATE the Camera  
         glRotatef(Rotation.x ,  1.0f,  0.0f,  0.0f);
         glRotatef(Rotation.y ,  0.0f,  1.0f,  0.0f);
 
  // Move Camera into Position       
        glTranslatef(
                      Position.x,
                      Position.y,
                      Position.z
                    );
 

// ======== NEW SHIT ===============================================

   
    glm::mat4 Temp;
    Vec3 RvX =  Vec3(  1.0f,  0.0f,   0.0);
    Vec3 RvY =  Vec3(  0.0f,  1.0f,   0.0);
    Vec3 RvZ =  Vec3(  0.0f,  0.0f,  -1.0);

    Temp = glm::rotate(Temp, glm::radians(Rotation.x), RvX);
    Temp = glm::rotate(Temp, glm::radians(Rotation.y), RvY);
    Temp = glm::rotate(Temp, glm::radians(Rotation.z), RvZ);

    ViewMatrix = glm::translate(Temp, glm::vec3(Position.x, Position.y, Position.z));


   ViewProjectionMatrix = ViewMatrix *  ProjectionMatrix ;



  // Up = Rotation * Vec3(0.0f, 1.0f, 0.0f);
  // ForwardRotated = Rotation * Forward;
  // RightRotated   = Rotation * Right;
  //
  //
  // Vec3 Target = Position += ForwardRotated;
  //
  // ViewMatrix = glm::lookAt(Position, Target, Up);
  // ViewProjectionMatrix = ViewMatrix * ProjectionMatrix; 

//   float V[] = 
//   {
//       0.0f,  0.0f,  0.0f,  0.0f,
//       0.0f,  0.0f,  0.0f,  0.0f,
//       0.0f,  0.0f,  0.0f,  0.0f,
//       0.0f,  0.0f,  0.0f,  1.0f
//   };
//   ViewMatrix = glm::make_mat4(V);
//
//   float T[] = 
//   {
//       0.0f,  0.0f,  0.0f,  Position.x,
//       0.0f,  0.0f,  0.0f,  Position.y,
//       0.0f,  0.0f,  0.0f,  Position.z,
//       0.0f,  0.0f,  0.0f,  1.0f
//   };
//
//   TranslationMatrix = glm::make_mat4(T);
//
//   float R[] = 
//   {
//       0.0f,  0.0f,  0.0f,  0.0f,
//       0.0f,  0.0f,  0.0f,  0.0f,
//       0.0f,  0.0f,  0.0f,  0.0f,
//       0.0f,  0.0f,  0.0f,  1.0f
//   };
//   RotationMatrix = glm::make_mat4(V);
//
//   ViewMatrix = TranslationMatrix;
//
}

Matrix Camera::LookAt(Vec3& eye, Vec3& target, Vec3& upDir)
{
Matrix ret;
ret = glm::lookAt(eye,target,upDir);
return ret;
}

void Camera::UpdateView()
{
    glm::mat4 Temp;
    Vec3 RvX =  Vec3( 1, 0, 0);
    Vec3 RvY =  Vec3( 0, 1, 0);
    Vec3 RvZ =  Vec3( 0, 0, 1);

    Temp = glm::rotate(Temp, glm::radians(Rotation.x), RvX);
    Temp = glm::rotate(Temp, glm::radians(Rotation.y), RvY);
    Temp = glm::rotate(Temp, glm::radians(Rotation.z), RvZ);

    ViewMatrix = glm::translate(Temp, glm::vec3(-Position.x, -Position.y, -Position.z));
    ViewProjectionMatrix = ProjectionMatrix * ViewMatrix;
}

void Camera::KeyPressed(const unsigned char key)
{
  float dx = 0; //how much we strafe on x
  float dz = 0; //how much we walk on z
  switch (key)
  {
    case 'w':
    {
      dz = 2;
      break;
    }
 
    case 's':
    {
      dz = -2;
      break;
    }
    case 'a':
    {
      dx = -2;
      break;
    }
 
    case 'd':
    {
      dx = 2;
      break;
    }
   default:
     break;
  }
   
  glm::mat4 mat = ViewMatrix;

  //row major < - DAFUQ
  glm::vec3 forward(mat[0][2], mat[1][2], mat[2][2]);
  glm::vec3 strafe( mat[0][0], mat[1][0], mat[2][0]);
  
  const float speed = 0.12f;
 
  EyeVector += (-dz * forward + dx * strafe) * speed;
  UpdateView();
}

void Camera::MouseMove(int dx, int dy)
{
    const float mouseX_Sensitivity = 0.25f;
    const float mouseY_Sensitivity = 0.25f;

    //note that yaw and pitch must be converted to radians.
    //this is done in UpdateView() by glm::rotate
    yaw   += mouseX_Sensitivity * dx;
    pitch += mouseY_Sensitivity * dy;

    UpdateView();
}

